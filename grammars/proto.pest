program = { ((top_level_statement ~ NEWLINE?) | NEWLINE)* }
top_level_statement = _{ syntax | package | import | option | top_level_definition }

syntax = { "syntax" ~ "=" ~ "\"" ~ proto_version ~ "\"" ~ ";" }
proto_version = { "proto2" | "proto3" }

package = { "package" ~ path ~ ";" }

import = { "import" ~ import_modifier* ~ "\"" ~ path ~ "\"" ~ ";" }
import_modifier = { "public" }

option = { "option" ~ option_body ~ ";" }
field_option = { "[" ~ option_body ~ "]" }
option_body = { option_identifier ~ "=" ~ constant }
option_identifier = _{ (identifier | "(" ~ identifier ~ ")") ~ ("." ~ identifier)* }

top_level_definition = _{ enum_def | message_def }

enum_def = { "enum" ~ enum_name ~ "{" ~ NEWLINE? ~ enum_body ~ NEWLINE? ~ "}" }
enum_name = { identifier }
enum_body = { ((option | enum_field) ~ NEWLINE?)* }
enum_field = { identifier ~ "=" ~ numeric ~ field_option* ~ ";" }

message_def = { "message" ~ message_name ~ "{" ~ NEWLINE? ~ message_body ~ NEWLINE? ~ "}" }
message_name = { identifier }
message_body = { (((option | message_def | message_field) ~ NEWLINE?) | NEWLINE)* }
message_field = { message_field_modifier? ~ type_identifier ~ identifier ~ "=" ~ numeric ~ ";" }
message_field_modifier = { "repeated" | "optional" }

identifier = @{ ((ASCII_ALPHANUMERIC | "_"))+ }
path = { identifier ~ ("." ~ identifier)* }

numeric = { NUMBER+ }
string = { "\"" ~ (!("\"") ~ ANY)* ~ "\"" }
boolean = { "true" | "false" }
constant = { numeric | string | boolean }
type_identifier = { primitive | identifier }
primitive = { "int32" | "int64" | "string" | "boolean" | map }
map = { "map" ~ "<" ~ type_identifier ~ "," ~ type_identifier ~ ">" }

WHITESPACE = _{ " " | "\t" }
COMMENT = { "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }