program = { ((top_level_statement ~ NEWLINE?) | NEWLINE)+ }
top_level_statement = _{ syntax | package | import | option | top_level_definition }

syntax = { "syntax" ~ "=" ~ "\"" ~ identifier ~ "\"" ~ ";" }

package = { "package" ~ path ~ ";" }

import = { "import" ~ import_modifier? ~ "\"" ~ path ~ "\"" ~ ";" }
import_modifier = { "public" }

option = { "option" ~ option_body ~ ";" }
field_option = { "[" ~ option_body ~ "]" }
option_body = { option_identifier ~ "=" ~ constant }
option_identifier = { (identifier | "(" ~ identifier ~ ")") ~ ("." ~ identifier)* }

top_level_definition = _{ enum_def | message_def }

enum_def = { "enum" ~ enum_name ~ "{" ~ NEWLINE? ~ enum_body ~ NEWLINE? ~ "}" }
enum_name = { identifier }
enum_body = { ((option | enum_value) ~ NEWLINE?)* }
enum_value = { identifier ~ "=" ~ numeric ~ field_option* ~ ";" }

message_def = { "message" ~ message_name ~ "{" ~ NEWLINE? ~ message_body ~ NEWLINE? ~ "}" }
message_name = { identifier }
message_body = { (((option | message_def | enum_def | message_field) ~ NEWLINE?) | NEWLINE)* }
message_field = { message_field_modifier? ~ type_identifier ~ identifier ~ "=" ~ numeric ~ field_option* ~ ";" }
message_field_modifier = { "repeated" | "optional" }

identifier = @{ ((ASCII_ALPHANUMERIC | "_"))+ }
path = @{ identifier ~ ("." ~ identifier)* }

constant = _{ numeric | string | boolean }
numeric = @{ NUMBER+ }
boolean = { "true" | "false" }
type_identifier = _{ primitive | path }
primitive = { "int32" | "int64" | "string" | "boolean" | map }
map = { "map<" ~ type_identifier ~ "," ~ type_identifier ~ ">" }

string = ${ "\"" ~ string_contents ~ "\"" }
string_contents = { (!("\"") ~ ANY)* }

WHITESPACE = _{ " " | "\t" }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }